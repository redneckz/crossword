package com.epam.crossword.ui.desktop;

import com.epam.commons.process.ProcessMonitor;
import com.epam.commons.process.ProcessMonitorAdapter;
import com.epam.crossword.Decision;
import com.epam.crossword.ui.CrosswordUIModel;
import static java.awt.EventQueue.invokeLater;
import java.io.File;
import java.io.IOException;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Александр
 */
public class MainFrame extends javax.swing.JFrame implements Observer {
	
	private final CrosswordUIModel model = new CrosswordUIModel();
	
	/**
	 * Creates new form MainFrame
	 */
	public MainFrame() {
		initComponents();
		model.addObserver(this);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        openCrosswordFileChooser = new javax.swing.JFileChooser();
        saveCrosswordFileChooser = new javax.swing.JFileChooser();
        loadDictFileChooser = new javax.swing.JFileChooser();
        decisionCanvas = new DecisionCanvas(model);
        progressBar = new javax.swing.JProgressBar();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        findDecisionMenuItem = new javax.swing.JMenuItem();
        fileMenuSeparator0 = new javax.swing.JPopupMenu.Separator();
        openCrosswordMenuItem = new javax.swing.JMenuItem();
        saveCrosswordMenuItem = new javax.swing.JMenuItem();
        saveCrosswordAsMenuItem = new javax.swing.JMenuItem();
        fileMenuSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        dictionaryMenu = new javax.swing.JMenu();
        loadDictionaryMenuItem = new javax.swing.JMenuItem();
        clearDictionaryMenuItem = new javax.swing.JMenuItem();

        openCrosswordFileChooser.setCurrentDirectory(null);
        openCrosswordFileChooser.setDialogTitle("Загрузить кроссворд");
        openCrosswordFileChooser.setFileFilter(new FileNameExtensionFilter("Кроссворд", "txt"));
        openCrosswordFileChooser.setFileHidingEnabled(true);

        saveCrosswordFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        saveCrosswordFileChooser.setCurrentDirectory(null);
        saveCrosswordFileChooser.setDialogTitle("Сохранить кроссворд");
        saveCrosswordFileChooser.setFileFilter(new FileNameExtensionFilter("Кроссворд", "txt"));
        saveCrosswordFileChooser.setFileHidingEnabled(true);

        loadDictFileChooser.setCurrentDirectory(null);
        loadDictFileChooser.setDialogTitle("Загрузить словарь");
        loadDictFileChooser.setFileFilter(new FileNameExtensionFilter("XDXF словарь", "xdxf"));
        loadDictFileChooser.setFileHidingEnabled(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Кроссворд");
        setLocationByPlatform(true);

        decisionCanvas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout decisionCanvasLayout = new javax.swing.GroupLayout(decisionCanvas);
        decisionCanvas.setLayout(decisionCanvasLayout);
        decisionCanvasLayout.setHorizontalGroup(
            decisionCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        decisionCanvasLayout.setVerticalGroup(
            decisionCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 397, Short.MAX_VALUE)
        );

        progressBar.setToolTipText("");
        progressBar.setString("");
        progressBar.setStringPainted(true);

        fileMenu.setMnemonic('f');
        fileMenu.setText("Кроссворд");

        findDecisionMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        findDecisionMenuItem.setText("Найти решение");
        findDecisionMenuItem.setEnabled(false);
        findDecisionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findDecisionMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(findDecisionMenuItem);
        fileMenu.add(fileMenuSeparator0);

        openCrosswordMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openCrosswordMenuItem.setMnemonic('o');
        openCrosswordMenuItem.setText("Открыть");
        openCrosswordMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCrosswordMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openCrosswordMenuItem);

        saveCrosswordMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveCrosswordMenuItem.setMnemonic('s');
        saveCrosswordMenuItem.setText("Сохранить");
        saveCrosswordMenuItem.setEnabled(false);
        saveCrosswordMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCrosswordMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveCrosswordMenuItem);

        saveCrosswordAsMenuItem.setText("Сохранить как");
        saveCrosswordAsMenuItem.setEnabled(false);
        saveCrosswordAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCrosswordAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveCrosswordAsMenuItem);
        fileMenu.add(fileMenuSeparator1);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Выйти");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        dictionaryMenu.setText("Словарь");

        loadDictionaryMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        loadDictionaryMenuItem.setText("Загрузить");
        loadDictionaryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDictionaryMenuItemActionPerformed(evt);
            }
        });
        dictionaryMenu.add(loadDictionaryMenuItem);

        clearDictionaryMenuItem.setText("Очистить");
        clearDictionaryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearDictionaryMenuItemActionPerformed(evt);
            }
        });
        dictionaryMenu.add(clearDictionaryMenuItem);

        menuBar.add(dictionaryMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(decisionCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(progressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(decisionCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(3, 3, 3)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
		System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

	private void openCrosswordMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCrosswordMenuItemActionPerformed
		try {
			openCrosswordFileChooser.showOpenDialog(this);
			File crosswordFile = openCrosswordFileChooser.getSelectedFile();
			if (crosswordFile != null) {
				model.openCrossword(crosswordFile);
				progressBar.setString("Кроссворд успешно загружен из файла \"" + crosswordFile.getName() + "\"");
			}
		} catch (IOException ex) {
			JOptionPane.showMessageDialog(MainFrame.this, "Ошибка загрузки кроссворда",
					"Ошибка", JOptionPane.ERROR_MESSAGE);
			Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
		}
	}//GEN-LAST:event_openCrosswordMenuItemActionPerformed

	private void loadDictionaryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDictionaryMenuItemActionPerformed
		loadDictFileChooser.showOpenDialog(this);
		final File dictFile = loadDictFileChooser.getSelectedFile();
		if (dictFile != null) {
			final String errorText = "Ошибка загрузки словаря \"" + dictFile.getName() + "\"";
			model.loadDictionary(dictFile, createLongProcessMonitor(errorText, new ProcessMonitorAdapter<String>() {

				private int itemCount = 0;
				
				@Override
				public void onStart() {
					progressBar.setValue(0);
					progressBar.setString("Загрузка словаря \"" + dictFile.getName() + "\"...");
				}
				
				@Override
				public void onStep(String item) {
					if (item != null) {
						itemCount++;
						progressBar.setValue((itemCount / 10) % 100);
						progressBar.setString(itemCount + " слов загружено");
					} else {
						progressBar.setValue(100);
						progressBar.setString("Индексация " + itemCount + " слов...");
					}
				}

				@Override
				public void onFail(Exception ex) {
					progressBar.setValue(0);
					progressBar.setString(errorText);
				}

				@Override
				public void onEnd() {
					progressBar.setValue(100);
					progressBar.setString("Загрузка словаря \"" + dictFile.getName() + "\" завершена");
				}
			}));
		}
	}//GEN-LAST:event_loadDictionaryMenuItemActionPerformed

	private void clearDictionaryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearDictionaryMenuItemActionPerformed
		model.clearDictionary();
		progressBar.setString("Словарь пуст");
	}//GEN-LAST:event_clearDictionaryMenuItemActionPerformed

	private void saveCrosswordMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCrosswordMenuItemActionPerformed
		try {
			if (model.getCrosswordFile() != null) {
				model.saveCrossword();
				progressBar.setString("Кроссворд успешно сохранён в файл \"" + model.getCrosswordFile().getName() + "\"");
			}
		} catch (Exception ex) {
			JOptionPane.showMessageDialog(MainFrame.this, "Ошибка сохранения кроссворда",
					"Ошибка", JOptionPane.ERROR_MESSAGE);
			Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
		}
	}//GEN-LAST:event_saveCrosswordMenuItemActionPerformed

	private void findDecisionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findDecisionMenuItemActionPerformed
		final String errorText = "Ошибка поиска решения";
		model.findDecision(createLongProcessMonitor(errorText, new ProcessMonitorAdapter<Decision>() {

			@Override
				public void onStart() {
					progressBar.setValue(0);
					progressBar.setString("Поиск решения...");
				}
				
				@Override
				public void onStep(Decision item) {
					progressBar.setValue(model.getDecisionSearchProgress());
				}

				@Override
				public void onFail(Exception ex) {
					progressBar.setString(errorText);
				}

				@Override
				public void onEnd() {
					if (model.isDecisionFound()) {
						progressBar.setString("Поиск решения завершен успешно");
					} else {
						progressBar.setString("Решение не может быть найдено");
					}
				}
		}));
	}//GEN-LAST:event_findDecisionMenuItemActionPerformed

	private void saveCrosswordAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCrosswordAsMenuItemActionPerformed
		saveCrosswordFileChooser.showSaveDialog(this);
		File crosswordFile = saveCrosswordFileChooser.getSelectedFile();
		try {
			if (crosswordFile != null) {
				model.saveCrosswordTo(crosswordFile);
				progressBar.setString("Кроссворд успешно сохранён в файл \"" + crosswordFile.getName() + "\"");
			}
		} catch (Exception ex) {
			JOptionPane.showMessageDialog(MainFrame.this, "Ошибка сохранения кроссворда",
					"Ошибка", JOptionPane.ERROR_MESSAGE);
			Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
		}
	}//GEN-LAST:event_saveCrosswordAsMenuItemActionPerformed

	private <T> ProcessMonitor<T> createLongProcessMonitor(final String errorText, final ProcessMonitor<T> extraMonitor) {
		return new ProcessMonitorAdapter<T>() {

			@Override
			public void onStart() {
				invokeLater(new Runnable() {

					@Override
					public void run() {
						fileMenu.setEnabled(false);
						dictionaryMenu.setEnabled(false);
						if (extraMonitor != null) {
							extraMonitor.onStart();
						}
					}
				});
			}

			@Override
			public void onStep(T data) {
				if (extraMonitor != null) {
					extraMonitor.onStep(data);
				}
			}

			@Override
			public void onFail(final Exception ex) {
				invokeLater(new Runnable() {

					@Override
					public void run() {
						Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
						fileMenu.setEnabled(true);
						dictionaryMenu.setEnabled(true);
						JOptionPane.showMessageDialog(MainFrame.this, errorText, "Ошибка", JOptionPane.ERROR_MESSAGE);
						if (extraMonitor != null) {
							extraMonitor.onFail(ex);
						}
					}
				});
			}
			
			@Override
			public void onEnd() {
				invokeLater(new Runnable() {

					@Override
					public void run() {
						fileMenu.setEnabled(true);
						dictionaryMenu.setEnabled(true);
						if (extraMonitor != null) {
							extraMonitor.onEnd();
						}
					}
				});
			}
		};
	}
	
	@Override
	public void update(Observable o, Object arg) {
		if (model.getCrosswordFile() != null) {
			this.setTitle("Кроссворд \"" + model.getCrosswordFile().getName() + "\"");
		} else {
			this.setTitle("Кроссворд");
		}
		findDecisionMenuItem.setEnabled(model.getCrossword().isNotEmpty());
		saveCrosswordAsMenuItem.setEnabled(model.getCrossword().isNotEmpty());
		saveCrosswordMenuItem.setEnabled(model.getCrossword().isNotEmpty());
	}
	
	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/*
		 * Set the Nimbus look and feel
		 */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/*
		 * Create and display the form
		 */
		invokeLater(new Runnable() {

			@Override
			public void run() {
				new MainFrame().setVisible(true);
			}
		});
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem clearDictionaryMenuItem;
    private javax.swing.JPanel decisionCanvas;
    private javax.swing.JMenu dictionaryMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPopupMenu.Separator fileMenuSeparator0;
    private javax.swing.JPopupMenu.Separator fileMenuSeparator1;
    private javax.swing.JMenuItem findDecisionMenuItem;
    private javax.swing.JFileChooser loadDictFileChooser;
    private javax.swing.JMenuItem loadDictionaryMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JFileChooser openCrosswordFileChooser;
    private javax.swing.JMenuItem openCrosswordMenuItem;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JMenuItem saveCrosswordAsMenuItem;
    private javax.swing.JFileChooser saveCrosswordFileChooser;
    private javax.swing.JMenuItem saveCrosswordMenuItem;
    // End of variables declaration//GEN-END:variables
}
